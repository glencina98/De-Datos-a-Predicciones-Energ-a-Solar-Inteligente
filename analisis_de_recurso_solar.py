# -*- coding: utf-8 -*-
"""Analisis de Recurso Solar.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k-RQVG0zzaUSUTCfvHbPy-8DWZ_y_4K9

#Introduccion

#ANÁLISIS DEL RECURSO SOLAR

##Librerias utilizadas para el desarrollo del proyecto
"""

import gdown
import json
import pandas as pd
# --- INSTALACIÓN ---
!pip install pvlib pandas matplotlib
import pvlib
from pvlib.iotools import get_nasa_power
import pandas as pd
import matplotlib.pyplot as plt

"""## Descargar Archivo JSON (API- Obtenida con solcast)"""

# ID del archivo
file_id = '1lxEoCrXdo4NixdlJip2xKNsIvwGhJWND'

# Construir la URL de descarga
url = f'https://drive.google.com/uc?id={file_id}'

output = '/content/Datos_API_Solcast.json'


# Descargar el archivo
gdown.download(url, output, quiet=False)

"""## Descargar Archivo con Datos Estacion Meteorológica en Sitio"""

# ID del archivo
file_id = '12hCytOLFA6c9WS7xBhJsvgqN5AQuEZEZ'

# Construir la URL de descarga
url = f'https://drive.google.com/uc?id={file_id}'

# Ruta donde se guardará el archivo
output = '/content/Datos_ESTACION_METEO_SITIO.xlsx'

# Descargar el archivo
gdown.download(url, output, quiet=False)

"""##Trabajando con DATOS de la API"""

# Ruta del archivo
file_path = '/content/Datos_API_Solcast.json'

# Leer JSON
with open(file_path, 'r', encoding='utf-8') as f:
    data = json.load(f)

# Verificar claves principales
print(data.keys())  # Esto ya sabemos que es ['estimated_actuals']

# Convertir lista de 'estimated_actuals' en DataFrame
df = pd.DataFrame(data['estimated_actuals'])

# Mostrar primeras filas
df.head()

# --- Convertir la columna de tiempo ---
# 1. Convertir a datetime con zona UTC
df['period_end'] = pd.to_datetime(df['period_end'], utc=True)

# 2. Convertir de UTC a Buenos Aires (UTC-3)
df['period_end'] = df['period_end'].dt.tz_convert('America/Argentina/Buenos_Aires')

# 3 Mostrar primeras filas
df.head()

# --- Filtrar por horario (de 8 a 20 horas) ---
df_filtrado = df[df['period_end'].dt.hour.between(8, 20)]

# 3 Mostrar primeras filas
df_filtrado.head()

print("Primera fecha:", df_filtrado['period_end'].min())
print("Última fecha:", df_filtrado['period_end'].max())

df_filtrado.info()

# --- Agrupar por 'mes_dia_hora' y promediar ---
df_promedio = (
    df_filtrado.groupby('period_end')
      .mean(numeric_only=True)
      .reset_index()
      .sort_values('period_end')
)


# 3 Mostrar primeras filas
df_promedio.head()

df_promedio = df_promedio.rename(columns={'period_end': 'TIME'})

# Revisar resultado
print(df_promedio.head())



df_filtrado = df_promedio[
    (df_promedio['TIME'].dt.hour >= 8) &
    (df_promedio['TIME'].dt.hour <= 19) &
    (df_promedio['TIME'].dt.month == 9)
]

# --- Revisar resultado ---
print(df_filtrado.head(12))
print(f"\nNúmero de filas después del filtro: {len(df_filtrado)}")
print(df_filtrado.dtypes)

# Extraer día, mes y hora
df_filtrado.loc[:, 'day'] = df_filtrado['TIME'].dt.day
df_filtrado.loc[:, 'month'] = df_filtrado['TIME'].dt.month
df_filtrado.loc[:, 'hour'] = df_filtrado['TIME'].dt.hour

# Agrupar por día, mes y hora y calcular promedio
df_promedio_dia_hora = df_filtrado.groupby(['day', 'month', 'hour']).mean().reset_index()

# Crear una columna TIME solo con día, mes y hora (año ficticio)
df_promedio_dia_hora['TIME'] = pd.to_datetime(
    df_promedio_dia_hora[['month', 'day', 'hour']].assign(year=2000),  # año ficticio
    format='%Y-%m-%d %H'
)

df_promedio_dia_hora.info()

# Crear una copia del DataFrame
df_para_excel = df_promedio_dia_hora.copy()

# Quitar zona horaria de la columna TIME
df_para_excel['TIME'] = df_para_excel['TIME'].dt.tz_localize(None)

# Guardar la copia en Excel
excel_path = '/content/Datos_API_SOLCAST.xlsx'
df_para_excel.to_excel(excel_path, index=False)

print(f"Archivo Excel creado en: {excel_path}")

"""##OBTENIENDO DATOS METEO CON LIBRERIA PV LIV (NASAPOWER)"""

# --- COORDENADAS ---
lat, lon, alt = -25.0728, -67.7800, 3700
tz = 'America/Argentina/Salta'

# --- DESCARGAR DATOS METEO NASA POWER ---
data, meta = get_nasa_power(
    latitude=lat,
    longitude=lon,
    start='2024-01-01',
    end='2024-12-31',
    parameters=['ALLSKY_SFC_SW_DWN', 'T2M', 'WS2M'],  # irradiancia, temperatura, viento
    community='RE'  # Renewable Energy dataset
)

# --- PROCESAR DATOS ---
# Ya viene con zona horaria UTC, solo convertimos
data.index = pd.to_datetime(data.index).tz_convert(tz)

data = data.rename(columns={
    'ghi': 'GHI_NASAPOWER',
    'temp_air': 'Temperature_C',
    'wind_speed_2m': 'Wind_speed_m_s'
})

print("✅ Datos descargados correctamente desde NASA POWER")
print(data.head())

data['TIME'] = data.index
print (data.info())

data_filtrado = data[
    (data['TIME'].dt.hour >= 8) &
    (data['TIME'].dt.hour <= 19) &
    (data['TIME'].dt.month == 9)
]

# --- Revisar resultado ---
print(data_filtrado.head(12))
print(f"\nNúmero de filas después del filtro: {len(data_filtrado)}")
print(data_filtrado.dtypes)

# Crear una copia del DataFrame
data_copia = data_filtrado.copy()

# Definir la ruta del archivo Excel
excel_path = '/content/Datos_API_NASA_POWER_PVLIB.xlsx'  # o la ruta que prefieras

# Eliminar la zona horaria de las columnas datetime
for col in data_copia.select_dtypes(include=["datetimetz"]).columns:
    data_copia[col] = data_copia[col].dt.tz_localize(None)

# Guardar la copia en Excel
data_copia.to_excel(excel_path, index=False)

print(f"Archivo Excel creado en: {excel_path}")

"""##OBTENIENDO DATOS METEO CON LIBRERIA PV LIV (TEORICO PV-LIB)"""

# --- 4) CALCULAR CLEAR-SKY CON PVLIB (Ineichen) usando las mismas horas ---
location = pvlib.location.Location(latitude=lat, longitude=lon, tz=tz, altitude=alt)
times = data.index  # usar exactamente las mismas horas para comparar
cs = location.get_clearsky(times, model='ineichen')  # devuelve 'ghi','dni','dhi' (nombres en minúscula)

cs = cs.rename(columns={
    'ghi': 'GHI_PVLIB',
    'dni': 'DNI_PVLIB',
    'dhi': 'DHI_PVLIB'
})

print(cs.head())

cs['TIME'] = cs.index
print (cs.info())

cs_filtrado = cs[
    (cs['TIME'].dt.hour >= 8) &
    (cs['TIME'].dt.hour <= 19) &
    (cs['TIME'].dt.month == 9)
]

# --- Revisar resultado ---
print(cs_filtrado.head(12))
print(f"\nNúmero de filas después del filtro: {len(cs_filtrado)}")
print(cs_filtrado.dtypes)

#Crear una copia del DataFrame
cs_copia = cs_filtrado.copy()

# Definir la ruta del archivo Excel
excel_path = '/content/Datos_METEO_TEORICOS_PVLIB.xlsx'  # o la ruta que prefieras

# Eliminar la zona horaria de las columnas datetime
for col in cs_copia.select_dtypes(include=["datetimetz"]).columns:
    cs_copia[col] = cs_copia[col].dt.tz_localize(None)

# Guardar la copia en Excel
cs_copia.to_excel(excel_path, index=False)

print(f"Archivo Excel creado en: {excel_path}")

"""##LIMPIEZA Y FILTADO datos de ESTACION METEO"""

# Leer el archivo Excel
df_meteo = pd.read_excel('/content/Datos_ESTACION_METEO_SITIO.xlsx')

# Ver las primeras filas
df_meteo.head()

# Ver las primeras filas
df_meteo.info()

# Asegurarte de que TIME sea datetime
df_meteo['t_stamp'] = pd.to_datetime(df_meteo['t_stamp'])

# Filtrar solo septiembre
data_sep = df_meteo[df_meteo['t_stamp'].dt.month == 9]

# Crear una lista de horas exactas (de 8 a 19 todos los días de septiembre)
horas_objetivo = pd.date_range(
    start=data_sep['t_stamp'].min().normalize() + pd.Timedelta(hours=8),
    end=data_sep['t_stamp'].max().normalize() + pd.Timedelta(hours=19),
    freq='H'
)

# Para cada hora exacta, encontrar el registro más cercano
def valor_mas_cercano(target):
    idx = (data_sep['t_stamp'] - target).abs().idxmin()
    return data_sep.loc[idx]

data_filtrado = pd.DataFrame([valor_mas_cercano(h) for h in horas_objetivo])

data_filtrado.head()

# Redondear al hora más cercana
data_filtrado['TIME'] = data_filtrado['t_stamp'].dt.round('H')

data_filtrado.head(24)

data_meteo_filtrado = data_filtrado[
    (data_filtrado['TIME'].dt.hour >= 8) &
    (data_filtrado['TIME'].dt.hour <= 19) &
    (data_filtrado['TIME'].dt.month == 9)
]

data_meteo_filtrado.head(24)

#Crear una copia del DataFrame
data_meteo_filtrado_copia = data_meteo_filtrado.copy()

# Definir la ruta del archivo Excel
excel_path = '/content/Datos_ESTACION_METEO_SITIO_filtrado.xlsx'  # o la ruta que prefieras

# Eliminar la zona horaria de las columnas datetime
for col in data_meteo_filtrado_copia.select_dtypes(include=["datetimetz"]).columns:
    data_meteo_filtrado_copia[col] = data_meteo_filtrado_copia[col].dt.tz_localize(None)

# Guardar la copia en Excel
data_meteo_filtrado_copia.to_excel(excel_path, index=False)

print(f"Archivo Excel creado en: {excel_path}")

"""##CONCATENAR TODAS LAS FUENTES PARA HACER UN ANALISIS

"""

#Los data frame son:

#data_meteo_filtrado_copia (DATO ESTACION METEO. REAL)
#cs_copia (DATO TEORICO-OBTENIDO CON PV LIB)
#data_copia (API NASA POWER-OBTENIDO CON PV LIB)
#df_para_excel (Datos_API_SOLCAST)

df_final = data_meteo_filtrado_copia.merge(cs_copia, on='TIME', how='outer') \
    .merge(data_copia, on='TIME', how='outer') \
    .merge(df_para_excel, on='TIME', how='outer')

df_final.info()

